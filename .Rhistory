library(readxl)
Base_Projet_Introduction_Modelisation_2024 <- read_excel("data/Base_Projet_Introduction-Modelisation-2024.xls")
View(Base_Projet_Introduction_Modelisation_2024)
head(Base_Projet_Introduction_Modelisation_2024,7)
# La dimension du DataFrame (804 voitures et 12 variables)
dim(Base_Projet_Introduction_Modelisation_2024)
# Les Marques de voitures et leurs frequences
frequence_marque <- table(Base_Projet_Introduction_Modelisation_2024$Marque)
print(frequence_marque)
# Compte des Modèles de voitures et leurs frequences
frequence_modele <- table(Base_Projet_Introduction_Modelisation_2024$Modèle)
print(frequence_modele)
# `Valeure minimale d'une voiture = 5.182.840  F CFA`
# `Valeure maximale d'une voiture = 42.449.034 F CFA`
prix_minimal <- min(Base_Projet_Introduction_Modelisation_2024$Prix)
prix_maximal <- max(Base_Projet_Introduction_Modelisation_2024$Prix)
print(paste("Le prix minimal en $ d'une voiture de marque americaine est egal a:", prix_minimal, ", "  ,"soit:", 599.94 * prix_minimal, "F CFA"))
print(paste("Le prix maximal en $ d'une voiture de marque americaine est egal a:", prix_maximal, ", "  ,"soit:", 599.94 * prix_maximal, "F CFA"))
num_vars <- Base_Projet_Introduction_Modelisation_2024[, sapply(Base_Projet_Introduction_Modelisation_2024, is.numeric)]
cat_vars <- Base_Projet_Introduction_Modelisation_2024[, sapply(Base_Projet_Introduction_Modelisation_2024, is.factor) | sapply(df, is.character)]
head(num_vars,7)
correlations <- cor(num_vars)
correlations
# Heatmap Correlation entre les variables numeriques `num_vars`
library(corrplot)
corrplot(correlations, method = "color", type = "upper",
tl.col = "black", tl.srt = 45,
col = colorRampPalette(c("blue", "white", "red"))(200))
dependante_var <- "Prix"
dependante_var
cor_avec_prix <- correlations[, dependante_var]
cor_avec_prix
tri_correlations <- sort(abs(cor_avec_prix), decreasing = TRUE)
tri_correlations
model1 <- lm(Prix ~ Cylindrée, data = num_vars)
summary(model1)
library(ggplot2)
library(plotly)
p <- ggplot(num_vars, aes(x = Prix, y = Cylindrée)) +
geom_point(color = 'blue') +
geom_smooth(method = "lm", se = FALSE, color = 'red') +
labs(title = "Régression linéaire entre Prix et Cylindrée", x = "Prix", y = "Cylindrée")
p_interactif1 <- ggplotly(p)
p_interactif1
model2 <- lm(Prix ~ Litre, data = num_vars)
summary(model2)
p <- ggplot(num_vars, aes(x = Prix, y = Litre)) +
geom_point(color = 'blue') +
geom_smooth(method = "lm", se = FALSE, color = 'red') +
labs(title = "Régression linéaire entre Prix et Litre", x = "Prix", y = "Litre")
p_interactif2 <- ggplotly(p)
p_interactif2
model3 <- lm(Prix ~ Régulateur, data = num_vars)
summary(model3)
library(ggplot2)
library(plotly)
p <- ggplot(num_vars, aes(x = Prix, y = Régulateur)) +
geom_point(color = 'blue') +
geom_smooth(method = "lm", se = FALSE, color = 'red') +
labs(title = "Régression linéaire entre Prix et Régulateur", x = "Prix", y = "Régulateur")
p_interactif3 <- ggplotly(p)
p_interactif3
library(ggplot2)
library(plotly)
p <- ggplot(num_vars, aes(x = Prix, y = Régulateur)) +
geom_point(color = 'blue') +
geom_smooth(method = "lm", se = FALSE, color = 'red') +
labs(title = "Régression linéaire entre Prix et Régulateur", x = "Prix", y = "Régulateur")
p_interactif3 <- ggplotly(p)
p_interactif3
# Extraction des informations importantes pour la comparaison
models <- list(model1, model2, model3)
noms_models <- c("Model1 (Prix ~ Cylindrée)", "Model2 (Prix ~ Litre)", "Model3 (Prix ~ Régulateur)")
resultats_compares <- data.frame(
Model = noms_models,
R_squared = sapply(models, function(model) summary(model)$r.squared),
Adjusted_R_squared = sapply(models, function(model) summary(model)$adj.r.squared),
AIC = sapply(models, AIC),
BIC = sapply(models, BIC),
p_value = sapply(models, function(model) anova(model)$`Pr(>F)`[1])
)
print(resultats_compares)
# Le Trace les résidus vs les valeurs ajustées pour chaque modèle
par(mfrow = c(1, 3))  # Disposition des graphiques en une ligne et trois colonnes
plot(model1$fitted.values, model1$residuals, main = "Model1 (Prix ~ Cylindrée)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
plot(model2$fitted.values, model2$residuals, main = "Model2 (Prix ~ Litre)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
plot(model3$fitted.values, model3$residuals, main = "Model3 (Prix ~ Régulateur)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
model_reg_multiple <- lm(Prix ~ Km + Cylindrée + Litre + Portes + Régulateur + HP + Cuir, data = num_vars)
summary(model_reg_multiple)
plot(model_reg_multiple)
shapiro.test(resid(model_reg_multiple))
predictions1 <- predict(model1, interval = "prediction", level = 0.95)
head(predictions1,38)
predictions2 <- predict(model1, interval = "prediction", level = 0.99)
head(predictions2, 38)
predictions3 <- predict(model1, interval = "confidence", level = 0.95)
head(predictions3,38)
predictions4 <- predict(model1, interval = "confidence", level = 0.99)
head(predictions4,38)
# Verification d'un quelconque ressemblance
identical(predictions1, predictions3)
# Verification d'un quelconque ressemblance
identical(predictions2, predictions4)
# Verification d'un quelconque ressemblance
identical(predictions1, predictions2)
identical(predictions3, predictions4)
save.image("C:/Users/hp/Desktop/Projet IMS CFD 2024 Mohamed Falilou Fall/Data.RData")
