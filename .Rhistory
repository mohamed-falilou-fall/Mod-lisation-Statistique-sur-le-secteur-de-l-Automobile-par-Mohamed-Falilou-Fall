main = "Régression linéaire : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = ".............", ylab = "............",
main = "Régression linéaire : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
library(shiny)
# Définir l'interface utilisateur
ui <- fluidPage(
titlePanel("Prédictions de Prix de voitures de fabrication americaine sur le marche des Etats-Unis selon le Régulateur, le Litre ou le Cylindrée"),
sidebarLayout(
sidebarPanel(
selectInput("model", "Choisir le modèle de régression"
choices = list("Cylindrée" = "Cylindrée",
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "........", ylab = "..........",
main = "Régression linéaire : Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Litre,
xlab = "........", ylab = "..............",
main = "Régression linéaire : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = ".............", ylab = "............",
main = "Régression linéaire : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
library(shiny)
# Définir l'interface utilisateur
ui <- fluidPage(
titlePanel("Prédictions de Prix de voitures de fabrication americaine sur le marche des Etats-Unis selon le Régulateur, le Litre ou le Cylindrée"),
sidebarLayout(
sidebarPanel(
selectInput("model", "Choisir le modèle de régression: Prix, ",
choices = list("Cylindrée" = "Cylindrée",
"Litre" = "Litre",
"Régulateur" = "Régulateur")),
conditionalPanel(
condition = "input.model1 == 'Cylindrée'",
sliderInput("value_Cylindrée", "Cylindrée",
min = min(num_vars$Cylindrée), max = max(num_vars$Cylindrée),
value = mean(num_vars$Cylindrée))
),
conditionalPanel(
condition = "input.model2 == 'Litre'",
sliderInput("value_Litre", "Litre",
min = min(num_vars$Litre), max = max(num_vars$Litre),
value = mean(num_vars$Litre))
),
conditionalPanel(
condition = "input.model3 == 'Régulateur'",
sliderInput("value_Régulateur", "Régulateur",
min = min(num_vars$Régulateur), max = max(num_vars$Régulateur),
value = mean(num_vars$Régulateur))
)
),
mainPanel(
textOutput("prediction"),
plotOutput("plot")
)
)
)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "........", ylab = "..........",
main = "Régression linéaire : Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Litre,
xlab = "........", ylab = "..............",
main = "Régression linéaire : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = ".............", ylab = "............",
main = "Régression linéaire : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "........", ylab = "..........",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Litre,
xlab = "........", ylab = "..............",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = ".............", ylab = "............",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Litre,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Prix,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 7), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 27)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Prix,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 27)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 27)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 2), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 19)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Prix,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 19)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 19)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 2), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 13)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Prix,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 13)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 13)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# La logique serveur
server <- function(input, output) {
# Faire des prédictions basées sur l'entrée de l'utilisateur
output$prediction <- renderText({
if (input$model == "Cylindrée") {
new_data <- data.frame(Cylindrée = input$value_Cylindrée)
predicted_Prix <- predict(model1, new_data)
} else if (input$model == "Litre") {
new_data <- data.frame(Litre = input$value_Litre)
predicted_Prix <- predict(model2, new_data)
} else if (input$model == "Régulateur") {
new_data <- data.frame(Régulateur = input$value_Régulateur)
predicted_Prix <- predict(model3, new_data)
}
paste("Le Prix predit est:", round(predicted_Prix, 2), "en U.S $")
})
# Créer un graphique de la régression
output$plot <- renderPlot({
if (input$model == "Cylindrée") {
plot(num_vars$Cylindrée, num_vars$Prix,
xlab = "Cylindrée", ylab = "Prix",
main = "Régression: Prix en fonction de Cylindrée")
abline(model1, col = "blue")
points(input$value_Cylindrée, predict(model1, data.frame(Cylindrée = input$value_Cylindrée)), col = "red", pch = 17)
} else if (input$model == "Litre") {
plot(num_vars$Litre, num_vars$Prix,
xlab = "Litre", ylab = "Prix",
main = "Régression : Prix en fonction de Puissance du Moteur")
abline(model2, col = "blue")
points(input$value_Litre, predict(model2, data.frame(Litre = input$value_Litre)), col = "red", pch = 17)
} else if (input$model == "Régulateur") {
plot(num_vars$Régulateur, num_vars$Prix,
xlab = "Régulateur", ylab = "Prix",
main = "Régression : Prix en fonction de Régulateur")
abline(model3, col = "blue")
points(input$value_Régulateur, predict(model3, data.frame(Régulateur = input$value_Régulateur)), col = "red", pch = 17)
}
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
load("C:/Users/hp/Desktop/Projet IMS CFD 2024 Mohamed Falilou Fall/.RData")
head(Base_Projet_Introduction_Modelisation_2024,7)
# La dimension du DataFrame (804 voitures et 12 variables)
dim(Base_Projet_Introduction_Modelisation_2024)
# Les Marques de voitures et leurs frequences
frequence_marque <- table(Base_Projet_Introduction_Modelisation_2024$Marque)
print(frequence_marque)
# Compte des Modèles de voitures et leurs frequences
frequence_modele <- table(Base_Projet_Introduction_Modelisation_2024$Modèle)
print(frequence_modele)
# `Valeure minimale d'une voiture = 5.182.840  F CFA`
# `Valeure maximale d'une voiture = 42.449.034 F CFA`
prix_minimal <- min(Base_Projet_Introduction_Modelisation_2024$Prix)
prix_maximal <- max(Base_Projet_Introduction_Modelisation_2024$Prix)
print(paste("Le prix minimal en $ d'une voiture de marque americaine est egal a:", prix_minimal, ", "  ,"soit:", 599.94 * prix_minimal, "F CFA"))
print(paste("Le prix maximal en $ d'une voiture de marque americaine est egal a:", prix_maximal, ", "  ,"soit:", 599.94 * prix_maximal, "F CFA"))
num_vars <- Base_Projet_Introduction_Modelisation_2024[, sapply(Base_Projet_Introduction_Modelisation_2024, is.numeric)]
cat_vars <- Base_Projet_Introduction_Modelisation_2024[, sapply(Base_Projet_Introduction_Modelisation_2024, is.factor) | sapply(df, is.character)]
head(num_vars,7)
correlations <- cor(num_vars)
correlations
# Heatmap Correlation entre les variables numeriques `num_vars`
library(corrplot)
corrplot(correlations, method = "color", type = "upper",
tl.col = "black", tl.srt = 45,
col = colorRampPalette(c("blue", "white", "red"))(200))
dependante_var <- "Prix"
dependante_var
cor_avec_prix <- correlations[, dependante_var]
cor_avec_prix
tri_correlations <- sort(abs(cor_avec_prix), decreasing = TRUE)
tri_correlations
model1 <- lm(Prix ~ Cylindrée, data = num_vars)
summary(model1)
p <- ggplot(num_vars, aes(x = Prix, y = Cylindrée)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Régression linéaire interactive entre Prix et Cylindrée", x = "Prix", y = "Cylindrée")
install.packages("ggplot2")
p <- ggplot(num_vars, aes(x = Prix, y = Cylindrée)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Régression linéaire interactive entre Prix et Cylindrée", x = "Prix", y = "Cylindrée")
p <- ggplot(num_vars, aes(x = Prix, y = Cylindrée)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Régression linéaire interactive entre Prix et Cylindrée", x = "Prix", y = "Cylindrée")
model2 <- lm(Prix ~ Litre, data = num_vars)
summary(model2)
p <- ggplot(num_vars, aes(x = Prix, y = Litre)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Régression linéaire interactive entre Prix et Litre", x = "Prix", y = "Litre")
model3 <- lm(Prix ~ Régulateur, data = num_vars)
summary(model3)
p <- ggplot(num_vars, aes(x = Prix, y = Régulateur)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Régression linéaire interactive entre Prix et Régulateur", x = "Prix", y = "Régulateur")
# Extraction des informations importantes pour la comparaison
models <- list(model1, model2, model3)
noms_models <- c("Model1 (Prix ~ Cylindrée)", "Model2 (Prix ~ Litre)", "Model3 (Prix ~ Régulateur)")
resultats_compares <- data.frame(
Model = noms_models,
R_squared = sapply(models, function(model) summary(model)$r.squared),
Adjusted_R_squared = sapply(models, function(model) summary(model)$adj.r.squared),
AIC = sapply(models, AIC),
BIC = sapply(models, BIC),
p_value = sapply(models, function(model) anova(model)$`Pr(>F)`[1])
)
print(resultats_compares)
# Le Tracé des résidus vs les valeurs ajustées pour chaque modèle
par(mfrow = c(1, 3))  # Disposition des graphiques en une ligne et trois colonnes
plot(model1$fitted.values, model1$residuals, main = "Model1 (Prix ~ Cylindrée)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
plot(model2$fitted.values, model2$residuals, main = "Model2 (Prix ~ Litre)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
plot(model3$fitted.values, model3$residuals, main = "Model3 (Prix ~ Régulateur)",
xlab = "Valeurs ajustées", ylab = "Résidus")
abline(h = 0, col = "red")
model_reg_multiple <- lm(Prix ~ Km + Cylindrée + Litre + Portes + Régulateur + HP + Cuir, data = num_vars)
summary(model_reg_multiple)
plot(model_reg_multiple)
shapiro.test(resid(model_reg_multiple))
